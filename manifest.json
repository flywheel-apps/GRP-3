{
  "name": "metadata-import-dicom",
  "label": "Metadata Import and Validation: DICOM",
  "description": "Metadata Import and Validation for DICOM files. This Gear will parse, import, and validate DICOM header metadata. Those metadata are added to the input file's metadata object (<inputFile>.info). A metadata validation template must be provided as input to the gear, which the gear will use to validate the DICOM metadata. Data which fail this validation will be tagged (with 'error') and an error file will be generated and written to the input container.",
  "version": "2.8.0_rc1",
  "custom": {
    "gear-builder": {
      "category": "converter",
      "image": "flywheel/metadata-import-dicom:2.8.0_rc1"
    },
    "flywheel": {
      "suite": "Metadata Import and Validation"
    }
  },
  "inputs": {
    "api-key": {
      "base": "api-key",
      "read-only": true
    },
    "dicom": {
      "base": "file",
      "description": "Dicom Archive",
      "optional": false,
      "type": {
        "enum": [
          "dicom"
        ]
      }
    },
    "json_template": {
      "base": "file",
      "description": "A JSON template to validate DICOM data",
      "optional": false,
      "type": {
        "enum": [
          "source code"
        ]
      }
    }
  },
  "config": {
    "split_on_SeriesUID": {
      "default": true,
      "type": "boolean",
      "description": "If true and DICOM archive contains multiple SeriesInstanceUID, the archive will be split in individual series"
    },
    "split_localizer": {
      "default": true,
      "type": "boolean",
      "description": "If true and DICOM archive contains embedded localizer images (ImageType = Localizer), the embedded images will be saved as their own DICOM archive"
    },
    "force_dicom_read": {
      "description": "Force pydicom to read the input file. This option allows files that do not adhere to the DICOM standard to be read and parsed. (Default=False)",
      "type": "boolean",
      "default": false
    }
  },
  "environment": {},
  "command": "./run.py",
  "author": "Flywheel",
  "maintainer": "Flywheel <support@flywheel.io>",
  "cite": "",
  "license": "Other",
  "source": "https://github.com/flywheel-apps/GRP-3",
  "url": ""
}
